@page "/"
@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration

<Row>
	<Column ColumnSize="ColumnSize.IsHalf.OnWidescreen">
		<Card Margin="Margin.Is4.OnY">
			<CardHeader>
				<CardTitle>Confirmed Cases</CardTitle>
			</CardHeader>
			<CardBody>
				@if (!isDataLoaded)
				{
					<div class="spinner"></div>
				}
				<BarChart @ref="covidByCountryChart" TItem="double" />
			</CardBody>
		</Card>
	</Column>
</Row>

@code{

	dynamic location;
	BarChart<double> covidByCountryChart;
	List<string> covidByCountryChartLabels;
	List<double> covidByCountryChartData;
	string fromDate = new DateTime(2020, 3, 1).ToString("yyyy-MM-dd");
	List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
	List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
	bool isDataLoaded = false;

	protected override void OnInitialized()
	{
		var fields = "location";
		string visitorIPAddress = GetIP();
		string url = Configuration["LocationAPIUrl"] + visitorIPAddress + "?key=" + Configuration["LocationAPIAccessKey"] + "&pretty=true&fields=" + fields;
		string response = HandleRequest(url);
		if (!string.IsNullOrWhiteSpace(response))
		{
			location = ((dynamic)JsonConvert.DeserializeObject(response)).location;
		}
	}

	protected string GetIP()
	{
		string externalIP = (new WebClient()).DownloadString(Configuration["DNSLookupUrl"]);
		externalIP = (new Regex(@"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")).Matches(externalIP)[0].ToString();
		return externalIP;
	}

	protected string HandleRequest(string url)
	{
		HttpWebRequest objRequest = (HttpWebRequest)WebRequest.Create(url);
		HttpWebResponse objResponse = (HttpWebResponse)objRequest.GetResponse();
		StreamReader responseStream = new StreamReader(objResponse.GetResponseStream());
		string responseRead = responseStream.ReadToEnd();
		responseRead = responseRead.Replace("\n", String.Empty);
		responseStream.Close();
		responseStream.Dispose();
		return responseRead;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await HandleRedraw();
		}
	}

	async Task HandleRedraw()
	{
		covidByCountryChartLabels = new List<string>();
		covidByCountryChartData = new List<double>();
		GetCovidByCountryData();
		await covidByCountryChart.Clear();
		await covidByCountryChart.AddLabelsDatasetsAndUpdate(covidByCountryChartLabels, GetCovidByCouontryChartData());
	}

	BarChartDataset<double> GetCovidByCouontryChartData()
	{
		return new BarChartDataset<double>
		{
			Label = "# of Confirmed Cases",
			Data = covidByCountryChartData,
			BackgroundColor = backgroundColors.ElementAt(1)
		};
	}

	void GetCovidByCountryData()
	{
		covidByCountryChartLabels.Clear();
		covidByCountryChartData.Clear();
		string url = $"{Configuration["Covid19APIBaseUrl"]}country/{location.country.name}/status/confirmed?from={fromDate}&to={DateTime.UtcNow.ToString("yyyy-MM-dd")}";
		string response = HandleRequest(url);
		double lastConfirmed = 0;
		if (!string.IsNullOrWhiteSpace(response))
		{
			var data = ((dynamic)JsonConvert.DeserializeObject(response));
			foreach (var item in data)
			{
				covidByCountryChartLabels.Add(Convert.ToString(item.Date).Substring(0, 10));
				covidByCountryChartData.Add(Convert.ToDouble(item.Cases) - lastConfirmed);
				lastConfirmed = Convert.ToDouble(item.Cases);
			}
			isDataLoaded = true;
			StateHasChanged();
		}
	}
}
