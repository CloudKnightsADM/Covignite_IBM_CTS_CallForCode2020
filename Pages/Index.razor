@page "/"
@inherits LayoutComponentBase
@inject IHostEnvironment CurrentEnvironment
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime;

<Row Padding="Padding.Is4.FromTop" Margin="Margin.Is1.FromTop">
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-pink info-box mb-3">
			<div class="dark">
				<div class="content">
					<div class="text">New deaths</div>
					<div class="number">@newDeaths</div>
				</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-pink info-box mb-3">
			<div class="content">
				<div class="text">Total deaths</div>
				<div class="number">@totalDeaths</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-orange info-box mb-3">
			<div class="dark">
				<div class="content">
					<div class="text">New confirmed cases</div>
					<div class="number">@newConfirmed</div>
				</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-orange info-box mb-3">
			<div class="content">
				<div class="text">Total confirmed cases</div>
				<div class="number">@totalConfirmed</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-light-green info-box mb-3">
			<div class="dark">
				<div class="content">
					<div class="text">New recovered cases</div>
					<div class="number">@newRecovered</div>
				</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-light-green info-box mb-3">
			<div class="content">
				<div class="text">Total recovered cases</div>
				<div class="number">@totalRecovered</div>
			</div>
		</div>
	</Column>
</Row>
<Row>
	<Column ColumnSize="ColumnSize.Is12.OnWidescreen">
		<Accordion>
			<Collapse Visible="@chartsVisible">
				<CollapseHeader>
					<Heading Size="HeadingSize.Is5">
						<SelectList Data="@countryData"
									TextField="@((item)=>item.TextField)"
									ValueField="@((item)=>item.ValueField)"
									SelectedValue="@selectedCountryValue"
									SelectedValueChanged="@CountryChangedHandler" />
						@*<Button Clicked="@(()=>chartsVisible = !chartsVisible)">Toggle</Button>*@
					</Heading>
				</CollapseHeader>
				<CollapseBody>
					<div class="col-lg-6 float-left">
						<Card Margin="Margin.Is1.FromTop">
							<CardHeader>
								<CardTitle>Confirmed Cases</CardTitle>
							</CardHeader>
							<CardBody Class="mb-0 pb-0">
								@if (!isConfirmedCasesChartLoaded)
								{
									<div class="spinner"></div>
								}
								<BarChart @ref="confirmedByCountryChart" TItem="double" />
							</CardBody>
						</Card>
					</div>
					<div class="col-lg-6 float-right">
						<Card Margin="Margin.Is1.FromTop">
							<CardHeader>
								<CardTitle>Deaths</CardTitle>
							</CardHeader>
							<CardBody Class="mb-0 pb-0">
								@if (!isDeathsChartLoaded)
								{
									<div class="spinner"></div>
								}
								<LineChart @ref="deathsByCountryChart" TItem="double" />
							</CardBody>
						</Card>
					</div>
				</CollapseBody>
			</Collapse>
		</Accordion>
	</Column>
</Row>

@code{

	LocationDetails locationDetails;
	CountryModel selectedCountry;
	BarChart<double> confirmedByCountryChart;
	List<string> confirmedByCountryChartLabels;
	List<double> confirmedByCountryChartData;
	LineChart<double> deathsByCountryChart;
	List<string> deathsByCountryChartLabels;
	List<double> deathsByCountryChartData;
	List<string> lightChartColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.5f), ChartColor.FromRgba(33, 150, 243, 0.5f), ChartColor.FromRgba(54, 162, 235, 0.5f), ChartColor.FromRgba(255, 206, 86, 0.5f), ChartColor.FromRgba(75, 192, 192, 0.5f), ChartColor.FromRgba(153, 102, 255, 0.5f), ChartColor.FromRgba(255, 159, 64, 0.5f) };
	List<string> darkChartColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(33, 150, 243, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
	bool isConfirmedCasesChartLoaded = false;
	bool isDeathsChartLoaded = false;
	string newConfirmed, totalConfirmed, newDeaths, totalDeaths, newRecovered, totalRecovered = string.Empty;
	List<CountryModel> countries;
	bool chartsVisible = true;
	IEnumerable<SelectModel> countryData;
	string selectedCountryValue;
	List<CountryTotalAllStatus> countryAllData;

	protected override async Task OnInitializedAsync()
	{
		confirmedByCountryChartLabels = new List<string>();
		confirmedByCountryChartData = new List<double>();
		deathsByCountryChartLabels = new List<string>();
		deathsByCountryChartData = new List<double>();
		GetCountries();
		await GetLocationDetailsFromIPAddress();
		var countryName = locationDetails.Country?.ToString();
		if (countries.Any(c => c.Name == countryName))
			selectedCountry = countries.First(c => c.Name == countryName);
		if (selectedCountry == null)
			selectedCountry = countries.OrderBy(c => c.Name).First();
		selectedCountryValue = selectedCountry.Code;
		GetSummaryData();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender || !isConfirmedCasesChartLoaded || !isDeathsChartLoaded)
		{
			await HandleRedraw();
		}
	}

	void CountryChangedHandler(object newValue)
	{
		confirmedByCountryChartLabels.Clear();
		confirmedByCountryChartData.Clear();
		deathsByCountryChartLabels.Clear();
		deathsByCountryChartData.Clear();
		var countryCode = newValue.ToString();
		selectedCountry = countries.First(c => c.Code == countryCode);
		selectedCountryValue = selectedCountry.Code;
		isConfirmedCasesChartLoaded = false;
		isDeathsChartLoaded = false;
		StateHasChanged();
	}

	private async Task GetLocationDetailsFromIPAddress()
	{
		var locationDetailsResponse = await JSRuntime.InvokeAsync<dynamic>("getLocationDetails");
		locationDetails = !string.IsNullOrEmpty(Convert.ToString(locationDetailsResponse)) ?
					JsonConvert.DeserializeObject<LocationDetails>(Convert.ToString(locationDetailsResponse)) :
					new LocationDetails { };
	}

	protected string HandleRequest(string url)
	{
		try
		{
			var response = string.Empty;
			using (WebClient wc = new WebClient())
				response = wc.DownloadString(url);
			response = response.Replace("\n", String.Empty);
			return response;
		}
		catch { return string.Empty; }
	}

	protected void GetCountries()
	{
		countries = new List<CountryModel>();
		var countryApiUrl = $"{Configuration["Covid19APIBaseUrl"]}countries";
		var response = HandleRequest(countryApiUrl);
		if (!string.IsNullOrWhiteSpace(response))
		{
			var data = ((dynamic)JsonConvert.DeserializeObject(response)).data;
			foreach (var item in data)
			{
				countries.Add(new CountryModel
				{
					Name = (string)item.name,
					Code = ((string)item.code).ToLower(),
					Population = !string.IsNullOrWhiteSpace(Convert.ToString(item.population)) ? Convert.ToInt64(item.population.ToString()) : 0,
					Latitude = !string.IsNullOrWhiteSpace(Convert.ToString(item.coordinates.latitude)) ? Convert.ToDecimal(item.coordinates.latitude.ToString()) : 0,
					Longitude = !string.IsNullOrWhiteSpace(Convert.ToString(item.coordinates.longitude)) ? Convert.ToDecimal(item.coordinates.longitude.ToString()) : 0
				});
			}
		}
		countryData = Enumerable.Range(0, countries.Count - 1).Select(x => new SelectModel { TextField = countries.ElementAt(x).Name, ValueField = countries.ElementAt(x).Code });
	}

	void GetSummaryData()
	{
		string url = $"{Configuration["Covid19APIBaseUrl"]}timeline";
		string response = HandleRequest(url);
		var data = ((dynamic)JsonConvert.DeserializeObject(response)).data[0];
		newConfirmed = data.new_confirmed;
		totalConfirmed = data.confirmed;
		newDeaths = data.new_deaths;
		totalDeaths = data.deaths;
		newRecovered = data.new_recovered;
		totalRecovered = data.recovered;
	}

	void GetCovidByCountryData(string countryCode)
	{
		countryAllData = new List<CountryTotalAllStatus>();
		confirmedByCountryChartLabels.Clear();
		confirmedByCountryChartData.Clear();
		deathsByCountryChartLabels.Clear();
		deathsByCountryChartData.Clear();
		string url = $"{Configuration["Covid19APIBaseUrl"]}countries/{countryCode}";
		string response = HandleRequest(url);
		if (!string.IsNullOrWhiteSpace(response))
		{
			var data = JsonConvert.DeserializeObject<dynamic>(response).data.timeline;
			foreach (var item in data)
			{
				countryAllData.Add(new CountryTotalAllStatus
				{
					Date = DateTime.ParseExact(item.date.ToString(), "yyyy-MM-dd", CultureInfo.InvariantCulture),
					Deaths = Convert.ToInt64(item.deaths.ToString()),
					Confirmed = Convert.ToInt64(item.confirmed.ToString()),
					Recovered = Convert.ToInt64(item.recovered.ToString()),
					Active = Convert.ToInt64(item.active.ToString())
				});
			}
			countryAllData = countryAllData.OrderBy(d => d.Date).ToList();
			var labels = countryAllData.Select(d => d.Date.ToShortDateString());
			confirmedByCountryChartLabels.AddRange(labels);
			confirmedByCountryChartData.AddRange(countryAllData.Select(d => Convert.ToDouble(d.Confirmed)));
			deathsByCountryChartLabels.AddRange(labels);
			deathsByCountryChartData.AddRange(countryAllData.Select(d => Convert.ToDouble(d.Deaths)));
		}
	}

	async Task HandleRedraw()
	{
		GetCovidByCountryData(selectedCountry.Code);
		await confirmedByCountryChart.Clear();
		if (confirmedByCountryChartLabels.Count > 0)
			await confirmedByCountryChart.AddLabelsDatasetsAndUpdate(confirmedByCountryChartLabels, GetConfirmedByCountryChartData());
		await deathsByCountryChart.Clear();
		if (confirmedByCountryChartLabels.Count > 0)
			await deathsByCountryChart.AddLabelsDatasetsAndUpdate(deathsByCountryChartLabels, GetDeathsByCountryChartData());
		isConfirmedCasesChartLoaded = true;
		isDeathsChartLoaded = true;
		StateHasChanged();
	}

	BarChartDataset<double> GetConfirmedByCountryChartData()
	{
		return new BarChartDataset<double>
		{
			Label = "# of Confirmed Cases",
			Data = confirmedByCountryChartData,
			BackgroundColor = lightChartColors.ElementAt(1),
			BorderColor = darkChartColors.ElementAt(1)
		};
	}

	LineChartDataset<double> GetDeathsByCountryChartData()
	{
		return new LineChartDataset<double>
		{
			Label = "# of Deaths",
			Data = deathsByCountryChartData,
			BackgroundColor = lightChartColors.ElementAt(0),
			BorderColor = darkChartColors.ElementAt(0),
			BorderWidth = 1
		};
	}
}
