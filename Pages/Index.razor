@page "/"
@inherits LayoutComponentBase
@inject IHostEnvironment CurrentEnvironment
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime;

<Row Padding="Padding.Is4.FromTop" Margin="Margin.Is1.FromTop">
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-pink info-box mb-3">
			<div class="dark">
				<div class="content">
					<div class="text">New deaths</div>
					<div class="number">@newDeaths</div>
				</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-pink info-box mb-3">
			<div class="content">
				<div class="text">Total deaths</div>
				<div class="number">@totalDeaths</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-orange info-box mb-3">
			<div class="dark">
				<div class="content">
					<div class="text">New confirmed cases</div>
					<div class="number">@newConfirmed</div>
				</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-orange info-box mb-3">
			<div class="content">
				<div class="text">Total confirmed cases</div>
				<div class="number">@totalConfirmed</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-light-green info-box mb-3">
			<div class="dark">
				<div class="content">
					<div class="text">New recovered cases</div>
					<div class="number">@newRecovered</div>
				</div>
			</div>
		</div>
	</Column>
	<Column ColumnSize="ColumnSize.Is2.OnWidescreen">
		<div class="bg-light-green info-box mb-3">
			<div class="content">
				<div class="text">Total recovered cases</div>
				<div class="number">@totalRecovered</div>
			</div>
		</div>
	</Column>
</Row>
<Row>
	<Column ColumnSize="ColumnSize.Is12.OnWidescreen">
		<Card Margin="Margin.Is1.FromTop">
			<CardHeader>
				<CardTitle>Total Confirmed Cases</CardTitle>
			</CardHeader>
			<CardBody Class="mb-0 pb-0">
				@if (!isMapDataLoaded)
				{
					<div class="spinner"></div>
				}
				<div id="map"></div>
			</CardBody>
		</Card>
	</Column>
	<Column ColumnSize="ColumnSize.Is12.OnWidescreen">
		<Accordion>
			<Collapse Visible="@chartsVisible">
				<CollapseHeader Class="pb-0">
					<Heading Size="HeadingSize.Is5">
						<Row>
							<Column ColumnSize="ColumnSize.Is6.OnWidescreen">
								<Field Horizontal="true">
									<FieldBody ColumnSize="ColumnSize.Is10">
										<SelectList Data="@countryData"
													TextField="@((item) => item.TextField)"
													ValueField="@((item) => item.ValueField)"
													SelectedValue="@selectedCountryValue"
													SelectedValueChanged="@CountryChangedHandler" />
									</FieldBody>
								</Field>
							</Column>
							@if (fromDate != DateTime.MinValue)
							{
								<Column ColumnSize="ColumnSize.Is3.OnWidescreen">
									<Field Horizontal="true">
										<FieldLabel ColumnSize="ColumnSize.Is3" Padding="Padding.Is2.FromTop" Float="Float.Left" Class="h6 text-right pl-0">From:</FieldLabel>
										<FieldBody ColumnSize="ColumnSize.Is9">
											<input class="form-control" id="fromDate" value="@FromDate" type="text" />
										</FieldBody>
									</Field>
								</Column>
							}
							@if (toDate != DateTime.MinValue)
							{
								<Column ColumnSize="ColumnSize.Is3.OnWidescreen">
									<Field Horizontal="true">
										<FieldLabel ColumnSize="ColumnSize.Is3" Padding="Padding.Is2.FromTop" Float="Float.Left" Class="h6 text-right pl-0">To:</FieldLabel>
										<FieldBody ColumnSize="ColumnSize.Is9">
											<input class="form-control" id="toDate" value="@ToDate" type="text" />
										</FieldBody>
									</Field>
								</Column>
							}
						</Row>
					</Heading>
				</CollapseHeader>
				<CollapseBody>
					<div class="col-lg-6 float-left">
						<Card Margin="Margin.Is1.FromTop">
							<CardHeader>
								<CardTitle>Confirmed Cases</CardTitle>
							</CardHeader>
							<CardBody Class="mb-0 pb-0">
								@if (!isConfirmedCasesChartLoaded)
								{
									<div class="spinner"></div>
								}
								<BarChart @ref="confirmedByCountryChart" TItem="double" />
							</CardBody>
						</Card>
					</div>
					<div class="col-lg-6 float-right">
						<Card Margin="Margin.Is1.FromTop">
							<CardHeader>
								<CardTitle>Deaths</CardTitle>
							</CardHeader>
							<CardBody Class="mb-0 pb-0">
								@if (!isDeathsChartLoaded)
								{
									<div class="spinner"></div>
								}
								<LineChart @ref="deathsByCountryChart" TItem="double" />
							</CardBody>
						</Card>
					</div>
				</CollapseBody>
			</Collapse>
		</Accordion>
	</Column>
</Row>

@code{

	LocationDetails locationDetails;
	CountryModel selectedCountry;
	BarChart<double> confirmedByCountryChart;
	List<string> confirmedByCountryChartLabels;
	List<double> confirmedByCountryChartData;
	LineChart<double> deathsByCountryChart;
	List<string> deathsByCountryChartLabels;
	List<double> deathsByCountryChartData;
	List<string> lightChartColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.5f), ChartColor.FromRgba(33, 150, 243, 0.5f), ChartColor.FromRgba(54, 162, 235, 0.5f), ChartColor.FromRgba(255, 206, 86, 0.5f), ChartColor.FromRgba(75, 192, 192, 0.5f), ChartColor.FromRgba(153, 102, 255, 0.5f), ChartColor.FromRgba(255, 159, 64, 0.5f) };
	List<string> darkChartColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(33, 150, 243, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
	bool isConfirmedCasesChartLoaded = false;
	bool isMapDataLoaded = false;
	bool isDeathsChartLoaded = false;
	string newConfirmed, totalConfirmed, newDeaths, totalDeaths, newRecovered, totalRecovered = string.Empty;
	List<CountryModel> countries;
	bool chartsVisible = true;
	IEnumerable<SelectModel> countryData;
	string selectedCountryValue;
	List<GlobalData> globalData;
	static DateTime fromDate;
	static DateTime toDate;
	private static Action setFromDateAction;
	private static Action setToDateAction;
	private static Action stateChangedAction;
	List<MapData> mapData;
	List<CountryModel> countryDataWithoutProvince;

	string FromDate
	{
		get
		{
			return fromDate.ToString("dd-MM-yyyy");
		}
	}

	string ToDate
	{
		get
		{
			return toDate.ToString("dd-MM-yyyy");
		}
	}

	[JSInvokable("SetFromDate")]
	public static void SetFromDate(string value)
	{
		if (!string.IsNullOrWhiteSpace(value) &&
			fromDate != DateTime.ParseExact(value, "dd-MM-yyyy", CultureInfo.InvariantCulture) &&
			fromDate <= toDate)
		{
			fromDate = DateTime.ParseExact(value, "dd-MM-yyyy", CultureInfo.InvariantCulture);
			setFromDateAction.Invoke();
		}
	}

	[JSInvokable("SetToDate")]
	public static void SetToDate(string value)
	{
		if (!string.IsNullOrWhiteSpace(value) &&
			toDate != DateTime.ParseExact(value, "dd-MM-yyyy", CultureInfo.InvariantCulture) &&
			toDate <= DateTime.Now.Date)
		{
			toDate = DateTime.ParseExact(value, "dd-MM-yyyy", CultureInfo.InvariantCulture);
			setToDateAction.Invoke();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		setFromDateAction = OnFromDateChanged;
		setToDateAction = OnToDateChanged;
		stateChangedAction = StateHasChanged;
		confirmedByCountryChartLabels = new List<string>();
		confirmedByCountryChartData = new List<double>();
		deathsByCountryChartLabels = new List<string>();
		deathsByCountryChartData = new List<double>();
		GetCountries();
		await GetLocationDetailsFromIPAddress();
		var countryName = locationDetails.Country?.ToString();
		if (countries.Any(c => c.Name == countryName))
			selectedCountry = countries.First(c => c.Name == countryName);
		if (selectedCountry == null)
			selectedCountry = countries.OrderBy(c => c.Name).First();

		selectedCountryValue = selectedCountry.Iso2;
		GetSummaryData();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender || !isConfirmedCasesChartLoaded || !isDeathsChartLoaded)
		{
			await HandleRedraw();
			await JSRuntime.InvokeVoidAsync("setDatePickers");
			if (firstRender)
			{
				await JSRuntime.InvokeVoidAsync("plotMap", mapData, mapData.Max(d => d.Confirmed));
			}
		}
	}

	void CountryChangedHandler(object newValue)
	{
		confirmedByCountryChartLabels.Clear();
		confirmedByCountryChartData.Clear();
		deathsByCountryChartLabels.Clear();
		deathsByCountryChartData.Clear();
		var countryCode = newValue.ToString();
		selectedCountry = countries.First(c => c.Iso2 == countryCode);
		selectedCountryValue = selectedCountry.Iso2;
		isConfirmedCasesChartLoaded = false;
		isDeathsChartLoaded = false;
		StateHasChanged();
	}

	void OnFromDateChanged()
	{
		confirmedByCountryChartLabels.Clear();
		confirmedByCountryChartData.Clear();
		deathsByCountryChartLabels.Clear();
		deathsByCountryChartData.Clear();
		isConfirmedCasesChartLoaded = false;
		isDeathsChartLoaded = false;
		StateHasChanged();
	}

	void OnToDateChanged()
	{
		confirmedByCountryChartLabels.Clear();
		confirmedByCountryChartData.Clear();
		deathsByCountryChartLabels.Clear();
		deathsByCountryChartData.Clear();
		isConfirmedCasesChartLoaded = false;
		isDeathsChartLoaded = false;
		StateHasChanged();
	}

	private async Task GetLocationDetailsFromIPAddress()
	{
		var locationDetailsResponse = await JSRuntime.InvokeAsync<dynamic>("getLocationDetails");
		locationDetails = !string.IsNullOrEmpty(Convert.ToString(locationDetailsResponse)) ?
					JsonConvert.DeserializeObject<LocationDetails>(Convert.ToString(locationDetailsResponse)) :
					new LocationDetails { };
	}

	protected void GetCountries()
	{
		var countryLookupFilePath = CurrentEnvironment.ContentRootPath
							+ Path.DirectorySeparatorChar.ToString()
							+ "wwwroot"
							+ Path.DirectorySeparatorChar.ToString()
							+ "data"
							+ Path.DirectorySeparatorChar.ToString()
							+ "UID_ISO_FIPS_LookUp_Table.csv";
		countries = DataHelper.GetCountries(countryLookupFilePath);
		countryDataWithoutProvince = countries.Where(c => c.Name.Trim().ToUpperInvariant() == c.CombinedKey.Trim().ToUpper()).OrderBy(d => d.Name).ToList();
		countryData = Enumerable.Range(0, countryDataWithoutProvince.Count - 1).Select(x => new SelectModel { TextField = countryDataWithoutProvince.ElementAt(x).Name, ValueField = countryDataWithoutProvince.ElementAt(x).Iso2 });
	}

	void GetSummaryData()
	{
		string url = $"{Configuration["Covid19APIBaseUrl"]}timeline";
		string response = DataHelper.HandleRequest(url);
		var data = ((dynamic)JsonConvert.DeserializeObject(response)).data[0];
		newConfirmed = data.new_confirmed;
		totalConfirmed = data.confirmed;
		newDeaths = data.new_deaths;
		totalDeaths = data.deaths;
		newRecovered = data.new_recovered;
		totalRecovered = data.recovered;
	}

	void GetCovidGlobalData()
	{
		confirmedByCountryChartLabels.Clear();
		confirmedByCountryChartData.Clear();
		deathsByCountryChartLabels.Clear();
		deathsByCountryChartData.Clear();
		string confirmedGlobalUrl = $"{Configuration["CovidCSSEGITimeSeriesDataBaseUrl"]}time_series_covid19_confirmed_global.csv";
		string deathsGlobalUrl = $"{Configuration["CovidCSSEGITimeSeriesDataBaseUrl"]}time_series_covid19_deaths_global.csv";
		globalData = DataHelper.GetCovidGlobalData(confirmedGlobalUrl, deathsGlobalUrl);
		fromDate = globalData.First().Date;
		toDate = globalData.Last().Date;
	}

	void FilterData()
	{
		var filteredData = globalData.Where(d => d.CountryName == selectedCountry.Name && d.Date >= fromDate && d.Date <= toDate);
		var dates = filteredData.OrderBy(d => d.Date).Select(d => d.Date).Distinct();
		var labels = dates.Select(d => d.ToShortDateString());
		confirmedByCountryChartLabels.AddRange(labels);
		deathsByCountryChartLabels.AddRange(labels);
		long lastConfirmed = 0;
		long lastDeaths = 0;
		foreach (var date in dates)
		{
			long confirmed = 0;
			long deaths = 0;

			foreach (var row in filteredData.Where(d => d.Date == date))
			{
				confirmed += row.Confirmed;
				deaths += row.Deaths;
			}
			confirmedByCountryChartData.Add(Math.Max(Convert.ToDouble(confirmed - lastConfirmed), 0d));
			deathsByCountryChartData.Add(Math.Max(Convert.ToDouble(deaths - lastDeaths), 0d));
			lastConfirmed = confirmed;
			lastDeaths = deaths;
		}
	}

	async Task HandleRedraw()
	{
		if (globalData == null)
		{
			GetCovidGlobalData();
			LoadMapData();
		}

		FilterData();
		await confirmedByCountryChart.Clear();
		if (confirmedByCountryChartLabels.Count > 0)
			await confirmedByCountryChart.AddLabelsDatasetsAndUpdate(confirmedByCountryChartLabels, GetConfirmedByCountryChartData());
		await deathsByCountryChart.Clear();
		if (confirmedByCountryChartLabels.Count > 0)
			await deathsByCountryChart.AddLabelsDatasetsAndUpdate(deathsByCountryChartLabels, GetDeathsByCountryChartData());
		isConfirmedCasesChartLoaded = true;
		isDeathsChartLoaded = true;
		StateHasChanged();
	}

	void LoadMapData()
	{
		mapData = new List<MapData>();
		var filteredData = globalData.Where(d => d.Date == toDate);
		var countries = filteredData.Select(d => d.CountryName).Distinct();

		foreach (var country in countries)
		{
			long confirmed = 0;
			long deaths = 0;

			foreach (var row in filteredData.Where(d => d.Date == toDate && d.CountryName == country))
			{
				confirmed += row.Confirmed;
				deaths += row.Deaths;
			}
			if (countryDataWithoutProvince.Any(c => c.Name == country) &&
				countryDataWithoutProvince.First(c => c.Name == country).Longitude.HasValue &&
				countryDataWithoutProvince.First(c => c.Name == country).Latitude.HasValue)
			{
				mapData.Add(new MapData
				{
					Name = country,
					Confirmed = confirmed,
					Long = countryDataWithoutProvince.First(c => c.Name == country).Longitude.Value,
					Lat = countryDataWithoutProvince.First(c => c.Name == country).Latitude.Value
				});
			}
		}
		isMapDataLoaded = true;
	}

	BarChartDataset<double> GetConfirmedByCountryChartData()
	{
		return new BarChartDataset<double>
		{
			Label = "# of Confirmed Cases",
			Data = confirmedByCountryChartData,
			BackgroundColor = lightChartColors.ElementAt(1),
			BorderColor = darkChartColors.ElementAt(1)
		};
	}

	LineChartDataset<double> GetDeathsByCountryChartData()
	{
		return new LineChartDataset<double>
		{
			Label = "# of Deaths",
			Data = deathsByCountryChartData,
			BackgroundColor = lightChartColors.ElementAt(0),
			BorderColor = darkChartColors.ElementAt(0),
			BorderWidth = 1,
			PointBorderWidth = 1,
			PointRadius = 1
		};
	}
}
