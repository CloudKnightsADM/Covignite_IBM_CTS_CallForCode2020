@page "/"
@namespace Covignite.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{ Layout = null; }

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Covignite</title>
	<base href="~/" />
	<!-- Add Material font (Roboto) and Material icon as needed -->
	<link href="https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,500i,700,700i|Roboto+Mono:300,400,700|Roboto+Slab:300,400,700" rel="stylesheet">
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<!-- Material CSS -->
	<link href="css/material.min.css" rel="stylesheet">
	<link href="css/all-themes.css" rel="stylesheet" />
	<link href="css/style.css" rel="stylesheet" />
	<link href="css/site.css" rel="stylesheet" />
	<link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
	<link href="_content/Blazorise.Material/blazorise.material.css" rel="stylesheet" />
	<link href="_content/Blazorise.Sidebar/blazorise.sidebar.css" rel="stylesheet" />

	<!-- Optional JavaScript -->
	<!-- jQuery first, then Popper.js, then Material JS -->
	<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
	<script src="js/material.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@latest/dist/chartjs-plugin-streaming.min.js"></script>
	<script src="_content/Blazorise/blazorise.js"></script>
	<script src="_content/Blazorise.Material/blazorise.material.js"></script>
	<script src="_content/Blazorise.Charts/blazorise.charts.js"></script>
	<script src="_content/Blazorise.Charts.Streaming/blazorise.charts.streaming.js"></script>

	<!-- Load d3.js and the geo projection plugin -->
	<script src="https://d3js.org/d3.v4.js"></script>
	<script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>

	<!-- Load Leaflet -->
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css" integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==" crossorigin="" />
	<script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js" integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA==" crossorigin=""></script>

</head>

<body class="theme-light-blue">
	<script type="text/javascript">

		var ipAddress = '';
		var currentLocation = {};

		function getIPAddress() {
			var url = "https://api.ipify.org/"
			$.ajax({
				async: !1,
				url: url,
				type: "GET",
				success: function (data) {
					ipAddress = data;
				},
				error: function () {
					console.log('Failed to get IP Address!');
				}
			});
		}

		function getLocationDetailsFromIPAddress() {
			var url = "https://api.ipregistry.co/" + ipAddress + "?key=djd94kovgao4h6";
			$.ajax({
				async: !1,
				url: url,
				type: "GET",
				success: function (data) {
					currentLocation.IPAddress = data.ip;
					currentLocation.Continent = data.location.continent.name;
					currentLocation.Country = data.location.country.name;
					currentLocation.capital = data.location.country.capital;
					currentLocation.Region = data.location.region.name;
					currentLocation.City = data.location.city;
					currentLocation.Zip = data.location.postal;
					currentLocation.Longitude = data.location.longitude;
					currentLocation.Latitude = data.location.latitude;
				},
				error: function () {
					console.log('Failed to get location details!');
				}
			});
		}

		window.getLocationDetails = () => {
			return currentLocation;
		};

		function Receivehandler(event) { }

		function Sendhandler(event) {
			if (event.data.context.skills['main skill'].user_defined && event.data.context.skills['main skill'].user_defined.promptlocation == true) {
				event.data.context.skills['main skill'].user_defined.location = currentLocation.City;
			}
		}

		window.watsonAssistantChatOptions = {
			integrationID: "2f373f7d-03ec-476a-bf69-db5a040c3fb9", // The ID of this integration.
			region: "eu-gb", // The region your integration is hosted in.
			serviceInstanceID: "62e735c8-694a-4e78-8fd0-829d59b6e3b0", // The ID of your service instance.
			onLoad: function (instance) {
				instance.on([{ type: "receive", handler: Receivehandler },
				{ type: "pre:send", handler: Sendhandler }
				]);
				instance.render();
			}
		};

		$(document).ready(function () {
			getIPAddress();
			getLocationDetailsFromIPAddress();
			setTimeout(function () {
				const t = document.createElement('script');
				t.src = "https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js";
				document.head.appendChild(t);
			});
		});

		window.setDatePickers = () => {
			$('#fromDate').pickdate({
				cancel: 'Clear',
				ok: 'Close',
				editable: true,
				closeOnSelect: false,
				onClose: function () {
					DotNet.invokeMethodAsync('Covignite', 'SetFromDate', $('#fromDate').val());
				},
				format: 'dd-mm-yyyy',
				formatSubmit: 'dd-mm-yyyy',
			});

			$('#toDate').pickdate({
				cancel: 'Clear',
				ok: 'Close',
				editable: true,
				closeOnSelect: false,
				onClose: function () {
					DotNet.invokeMethodAsync('Covignite', 'SetToDate', $('#toDate').val());
				},
				format: 'dd-mm-yyyy',
				formatSubmit: 'dd-mm-yyyy',
			});
		};

		window.plotMap = (mapData, maxVal) => {

			var radius = d3.scaleSqrt().domain([0, maxVal]).range([0, 40]);

			// map is the id of the div where the map will appear
			var map = L
				.map('map', { attributionControl: false })
				.setView([42.35, -71.08], 13); // center position + zoom

			// Add a tile to the map
			L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
				attribution: 'Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012',
				maxZoom: 15,
				minZoom: 3
			}).addTo(map);

			/*
			L.tileLayer(
				'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
				attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>',
				maxZoom: 15,
				minZoom: 3
			}).addTo(map);

			*/

			map.setZoom(3);

			var southWest = L.latLng(-89.98155760646617, -180),
				northEast = L.latLng(89.99346179538875, 180);
			var bounds = L.latLngBounds(southWest, northEast);

			map.setMaxBounds(bounds);
			map.on('drag', function () {
				map.panInsideBounds(bounds, { animate: false });
			});

			// Add a svg layer to the map
			L.svg().addTo(map);

			// -1- Create a tooltip div that is hidden by default:
			var tooltip = d3.select("body")
				.append("div")
				.style("opacity", 0)
				.attr("class", "tooltip")
				.style("background-color", "black")
				.style("border-radius", "0px")
				.style("padding", "10px")
				.style("color", "white")
				.style("z-index", "999")
				.style("min-width", "100px")
				.style("display", "none")

			// -2- Create 3 functions to show / update (when mouse move but stay on same circle) / hide the tooltip
			var showTooltip = function (d) {
				tooltip
					.transition()
					.duration(200)
				tooltip
					.style("position", "absolute")
					.style("opacity", 1)
					.html("Country: " + d.name + "<br/>" + "Confirmed cases: " + d.confirmed)
					.style("left", function () {
						var posX = d3.event.pageX;
						if ($(window).width() - (posX + tooltip.node().getBoundingClientRect().width) < 100)
							return (posX - tooltip.node().getBoundingClientRect().width) + "px";
						return posX + "px";
					})
					.style("top", function () {
						var posY = d3.event.pageY;
						if ($(window).height() - (posY + tooltip.node().getBoundingClientRect().height) < 100)
							return (posY - tooltip.node().getBoundingClientRect().height) + "px";
						return posY + "px";
					})
					.style("z-index", "999")
					.style("display", "block")
			}

			var moveTooltip = function (d) {
				tooltip
					.style("left", function () {
						var posX = d3.event.pageX;
						if ($(window).width() - (posX + tooltip.node().getBoundingClientRect().width) < 100)
							return (posX - tooltip.node().getBoundingClientRect().width) + "px";
						return posX + "px";
					})
					.style("top", function () {
						var posY = d3.event.pageY;
						if ($(window).height() - (posY + tooltip.node().getBoundingClientRect().height) < 100)
							return (posY - tooltip.node().getBoundingClientRect().height) + "px";
						return posY + "px";
					})
					.style("z-index", "999")
					.style("display", "block")
			}

			var hideTooltip = function (d) {
				tooltip
					.transition()
					.duration(200)
					.style("opacity", 0)
					.style("z-index", "999")
					.style("display", "none")
			}

			// Select the svg area and add circles:
			var markers = d3.select("#map")
				.select("svg")
				.select('g')
				.selectAll("myCircles")
				.data(mapData)
				.enter()
				.append("circle")
				.style("pointer-events", "all")
				.style("cursor", "default")
				.attr("cx", function (d) {
					return map.latLngToLayerPoint([d.lat, d.long]).x;
				})
				.attr("cy", function (d) {
					return map.latLngToLayerPoint([d.lat, d.long]).y;
				})
				.attr("r", function (d) {
					return radius(d.confirmed);
				})
				.style("fill", "red")
				.attr("stroke", "red")
				.attr("stroke-width", 1)
				.attr("fill-opacity", .4)
				.on("mouseover", showTooltip)
				.on("mousemove", moveTooltip)
				.on("mouseleave", hideTooltip);

			map.on('zoomend', function () {
				var currentZoom = map.getZoom();
				markers.attr("r", function (d) {
					return radius(d.confirmed) * parseInt(map.getZoom() / 3);
				});
			});

			window.onresize = function (event) {
				setTimeout(function () { map.invalidateSize() }, 1000);
			};

			// Function that update circle position if something change
			function update() {
				d3.selectAll("circle")
					.attr("cx", function (d) {
						return map.latLngToLayerPoint([d.lat, d.long]).x;
					})
					.attr("cy", function (d) {
						return map.latLngToLayerPoint([d.lat, d.long]).y;
					});
			}

			// If the user change the map (zoom or drag), I update circle position:
			map.on("moveend", update);
		}

	</script>
	<app>
		<component type="typeof(App)" render-mode="Server" />
	</app>

	<div id="blazor-error-ui">
		<environment include="Staging,Production">
			An error has occurred. This application may no longer respond until reloaded.
		</environment>
		<environment include="Development">
			An unhandled exception has occurred. See browser dev tools for details.
		</environment>
		<a href="" class="reload">Reload</a>
		<a class="dismiss">🗙</a>
	</div>

	<!--Footer-->
	<footer class="text-center font-small bg-light-blue">
		&copy; 2020 - COVIGNITE
	</footer>

	<script src="_framework/blazor.server.js"></script>
</body>
</html>
