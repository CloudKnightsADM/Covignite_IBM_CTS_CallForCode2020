@page "/"
@namespace Covignite.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{ Layout = null; }

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Covignite</title>
	<base href="~/" />
	<!-- Add Material font (Roboto) and Material icon as needed -->
	<link href="https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,500i,700,700i|Roboto+Mono:300,400,700|Roboto+Slab:300,400,700" rel="stylesheet">
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<!-- Material CSS -->
	<link href="css/material.min.css" rel="stylesheet">
	<link href="css/all-themes.css" rel="stylesheet" />
	<link href="css/style.css" rel="stylesheet" />
	<link href="css/site.css" rel="stylesheet" />
	<link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
	<link href="_content/Blazorise.Material/blazorise.material.css" rel="stylesheet" />
	<link href="_content/Blazorise.Sidebar/blazorise.sidebar.css" rel="stylesheet" />

	<!-- Optional JavaScript -->
	<!-- jQuery first, then Popper.js, then Material JS -->
	<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
	<script src="js/material.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@latest/dist/chartjs-plugin-streaming.min.js"></script>
	<script src="_content/Blazorise/blazorise.js"></script>
	<script src="_content/Blazorise.Material/blazorise.material.js"></script>
	<script src="_content/Blazorise.Charts/blazorise.charts.js"></script>
	<script src="_content/Blazorise.Charts.Streaming/blazorise.charts.streaming.js"></script>
</head>

<body class="theme-red">
	<script type="text/javascript">

		var ipAddress = '';
		var currentLocation = {};

		function getIPAddress() {
			var url = "https://api.ipify.org/"
			$.ajax({
				async: !1,
				url: url,
				type: "GET",
				success: function (data) {
					ipAddress = data;
				},
				error: function () {
					console.log('Failed to get IP Address!');
				}
			});
		}

		function getLocationDetailsFromIPAddress() {
			var url = "https://api.ipregistry.co/" + ipAddress + "?key=djd94kovgao4h6";
			$.ajax({
				async: !1,
				url: url,
				type: "GET",
				success: function (data) {
					currentLocation.IPAddress = data.ip;
					currentLocation.Continent = data.location.continent.name;
					currentLocation.Country = data.location.country.name;
					currentLocation.capital = data.location.country.capital;
					currentLocation.Region = data.location.region.name;
					currentLocation.City = data.location.city;
					currentLocation.Zip = data.location.postal;
					currentLocation.Longitude = data.location.longitude;
					currentLocation.Latitude = data.location.latitude;
				},
				error: function () {
					console.log('Failed to get IP Address!');
				}
			});
		}

		window.getLocationDetails = () => {
			return currentLocation;
		};

		function Receivehandler(event) {

			// Your skill reference name might be different than "main skill".

			// When fetching the Welcome Node on startup, the context won't be defined, yet. If you want to add to
			// context when fetching welcome node, you will need to define the context.
			//event.data.context.skills['main skill'] = event.data.context.skills['main skill'] || { user_defined: {} };
			//event.data.context.skills['main skill'].user_defined.party_time = true;

			if (event.data.context.skills['main skill'].user_defined && event.data.context.skills['main skill'].user_defined.promptlocation == true) {
				console.log("inside block");
				//Geolocation fetching here
			}

			// You can OPTIONALLY return a promise and we will wait to continue processing until the promise is resolved. If
			// you return nothing we will immediately continue processing the event. If you fail the Promise we will cancel
			// sending the message.

			/*
			return new Promise(function(resolve) {
			  myAsyncThing.then(function(moreData) {
				// Do some other manipulation of event.data...
				resolve();
			  });
			});
			*/

		}

		function Sendhandler(event) {
			if (event.data.context.skills['main skill'].user_defined && event.data.context.skills['main skill'].user_defined.promptlocation == true) {
				event.data.context.skills['main skill'].user_defined.location = currentLocation.City;
			}
		}

		window.watsonAssistantChatOptions = {
			integrationID: "2f373f7d-03ec-476a-bf69-db5a040c3fb9", // The ID of this integration.
			region: "eu-gb", // The region your integration is hosted in.
			serviceInstanceID: "62e735c8-694a-4e78-8fd0-829d59b6e3b0", // The ID of your service instance.
			onLoad: function (instance) {
				instance.on([{ type: "receive", handler: Receivehandler },
				{ type: "pre:send", handler: Sendhandler }
				]);
				instance.render();
			}
		};

		$(document).ready(function () {
			getIPAddress();
			getLocationDetailsFromIPAddress();
			setTimeout(function () {
				const t = document.createElement('script');
				t.src = "https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js";
				document.head.appendChild(t);
			});
		})

	</script>
	<app>
		<component type="typeof(App)" render-mode="Server" />
	</app>

	<div id="blazor-error-ui">
		<environment include="Staging,Production">
			An error has occurred. This application may no longer respond until reloaded.
		</environment>
		<environment include="Development">
			An unhandled exception has occurred. See browser dev tools for details.
		</environment>
		<a href="" class="reload">Reload</a>
		<a class="dismiss">🗙</a>
	</div>

	<script src="_framework/blazor.server.js"></script>
</body>
</html>
