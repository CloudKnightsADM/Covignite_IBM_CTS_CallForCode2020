@page "/"
@namespace Covignite.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{ Layout = null; }

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Covignite</title>
	<base href="~/" />
	<!-- Material CSS -->
	<link href="css/material.min.css" rel="stylesheet">
	<link href="css/site.css" rel="stylesheet" />

	<!-- Add Material font (Roboto) and Material icon as needed -->
	<link href="https://fonts.googleapis.com/css?family=Roboto:300,300i,400,400i,500,500i,700,700i|Roboto+Mono:300,400,700|Roboto+Slab:300,400,700" rel="stylesheet">
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

	<link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
	<link href="_content/Blazorise.Material/blazorise.material.css" rel="stylesheet" />
	<link href="_content/Blazorise.Sidebar/blazorise.sidebar.css" rel="stylesheet" />

	<!-- Optional JavaScript -->
	<!-- jQuery first, then Popper.js, then Material JS -->
	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
	<script src="js/material.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

	<script src="_content/Blazorise/blazorise.js"></script>
	<script src="_content/Blazorise.Material/blazorise.material.js"></script>
	<script src="_content/Blazorise.Charts/blazorise.charts.js"></script>
</head>

<body>
    <script>
        function Receivehandler(event) {

            // Your skill reference name might be different than "main skill".

            // When fetching the Welcome Node on startup, the context won't be defined, yet. If you want to add to
            // context when fetching welcome node, you will need to define the context.
            //event.data.context.skills['main skill'] = event.data.context.skills['main skill'] || { user_defined: {} };
            //event.data.context.skills['main skill'].user_defined.party_time = true;

            if (event.data.context.skills['main skill'].user_defined && event.data.context.skills['main skill'].user_defined.promptlocation == true) {
                console.log("inside block");
                //Geolocation fetching here
            }

            // You can OPTIONALLY return a promise and we will wait to continue processing until the promise is resolved. If
            // you return nothing we will immediately continue processing the event. If you fail the Promise we will cancel
            // sending the message.

            /*
            return new Promise(function(resolve) {
              myAsyncThing.then(function(moreData) {
                // Do some other manipulation of event.data...
                resolve();
              });
            }); 
            */

        }

        function Sendhandler(event) {
            if (event.data.context.skills['main skill'].user_defined && event.data.context.skills['main skill'].user_defined.promptlocation == true) {
                event.data.context.skills['main skill'].user_defined.location = 'Kolkata';
            }
        }
        window.watsonAssistantChatOptions = {
            integrationID: "2f373f7d-03ec-476a-bf69-db5a040c3fb9", // The ID of this integration.
            region: "eu-gb", // The region your integration is hosted in.
            serviceInstanceID: "62e735c8-694a-4e78-8fd0-829d59b6e3b0", // The ID of your service instance.
            onLoad: function (instance) {
                instance.on([{ type: "receive", handler: Receivehandler },
                    { type: "pre:send", handler: Sendhandler }
                ]);
                instance.render();
            }
        };
        setTimeout(function () {
            const t = document.createElement('script');
            t.src = "https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js";
            document.head.appendChild(t);
        });
    </script>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

	<div id="blazor-error-ui">
		<environment include="Staging,Production">
			An error has occurred. This application may no longer respond until reloaded.
		</environment>
		<environment include="Development">
			An unhandled exception has occurred. See browser dev tools for details.
		</environment>
		<a href="" class="reload">Reload</a>
		<a class="dismiss">🗙</a>
	</div>

	<script src="_framework/blazor.server.js"></script>
</body>
</html>
